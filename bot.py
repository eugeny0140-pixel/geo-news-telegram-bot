import os
import re
import logging
import feedparser
import threading
import time
from datetime import datetime, timedelta
from flask import Flask
from telegram import Bot
from telegram.constants import ParseMode
from deep_translator import GoogleTranslator
from urllib.parse import urldefrag

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
PORT = int(os.getenv('PORT', 10000))

if not TELEGRAM_BOT_TOKEN or not CHANNEL_ID:
    logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ CHANNEL_ID")
    exit(1)

bot = Bot(token=TELEGRAM_BOT_TOKEN)

# === –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å RSS ===
SOURCES = [
    ("Good Judgment", "https://goodjudgment.com/feed/"),
    ("Johns Hopkins", "https://www.centerforhealthsecurity.org/feed/"),
    ("Metaculus", "https://www.metaculus.com/feed/"),
    ("RAND Corporation", "https://www.rand.org/rss.xml"),
    ("World Economic Forum", "https://www.weforum.org/rss"),
    ("CSIS", "https://www.csis.org/rss.xml"),
    ("Atlantic Council", "https://www.atlanticcouncil.org/feed/"),
    ("Chatham House", "https://www.chathamhouse.org/feed"),
    ("The Economist", "https://www.economist.com/rss/rss.xml"),
    ("Bloomberg", "https://www.bloomberg.com/feed/podcast/"),
    ("Foreign Affairs", "https://www.foreignaffairs.com/rss.xml"),
    ("CFR", "https://www.cfr.org/rss.xml"),
    ("BBC Future", "https://feeds.bbci.co.uk/news/science_and_environment/rss.xml"),
    ("Carnegie Endowment", "https://carnegieendowment.org/feed/rss"),
    ("Bruegel", "https://www.bruegel.org/feed"),
    ("E3G", "https://www.e3g.org/feed/")
]

KEYWORDS = {
    'russia', 'ukraine', 'putin', 'kremlin', 'sanctions', 'gas', 'oil',
    'military', 'nato', 'eu', 'usa', 'europe', 'war', 'conflict',
    'russian', 'ukrainian', 'moscow', 'kiev', 'kyiv', 'belarus',
    'baltic', 'donbas', 'crimea', 'black sea', 'energy', 'grain',
    'weapons', 'defense', 'geopolitic', 'strategic', 'security'
}

seen_urls = set()
pending_articles = []  # [(prefix, title, lead, url), ...]
lock = threading.Lock()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def contains_keywords(text: str) -> bool:
    return any(kw in text.lower() for kw in KEYWORDS)

def escape_markdown_v2(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def translate_safe(text: str, target='ru') -> str:
    try:
        if not text.strip():
            return text
        return GoogleTranslator(source='auto', target=target).translate(text)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

def is_generic_description(desc: str) -> bool:
    generic = ['appeared first on', 'read more', 'click here', 'continue reading', '¬©']
    return any(phrase in desc.lower() for phrase in generic)

def get_lead(desc: str) -> str:
    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤
    sentences = re.split(r'(?<=[.!?])\s+', desc.strip())
    if sentences and sentences[0].strip():
        return sentences[0].strip()
    return desc[:300].strip()

def fetch_articles_for_window():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–µ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ~30+ –º–∏–Ω—É—Ç"""
    global pending_articles
    new_articles = []
    now = datetime.utcnow()
    cutoff = now - timedelta(minutes=40)  # —á—É—Ç—å –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å

    logger.info("üîç –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∑–∞ 10 –º–∏–Ω –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏)")

    for name, feed_url in SOURCES:
        try:
            feed = feedparser.parse(feed_url)
            if not hasattr(feed, 'entries'):
                continue

            for entry in feed.entries:
                pub_date = None
                if hasattr(entry, 'published_parsed') and entry.published_parsed:
                    pub_date = datetime(*entry.published_parsed[:6])
                if not pub_date or pub_date < cutoff:
                    continue

                url = entry.get('link', '').strip()
                if not url:
                    continue
                url, _ = urldefrag(url)

                with lock:
                    if url in seen_urls:
                        continue

                title = entry.get('title', '').strip()
                desc = entry.get('summary', '').strip()

                if not desc or is_generic_description(desc):
                    continue

                if not contains_keywords(title + ' ' + desc):
                    continue

                lead = get_lead(desc)
                prefix = re.sub(r'[^a-z0-9]', '', name.lower())
                new_articles.append((prefix, title, lead, url))

                # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç–∞—Ç—å—é –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                break

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {name}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
    with lock:
        pending_articles = new_articles
        for _, _, _, url in new_articles:
            seen_urls.add(url)

    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(new_articles)} —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

def send_pending_articles():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Ä–æ–≤–Ω–æ –≤ :00 –∏–ª–∏ :30"""
    global pending_articles
    articles_to_send = []
    with lock:
        articles_to_send = pending_articles.copy()
        pending_articles.clear()

    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(articles_to_send)} —Å—Ç–∞—Ç–µ–π")
    for prefix, title, lead, url in articles_to_send:
        try:
            title_ru = translate_safe(title)
            lead_ru = translate_safe(lead)

            message = (
                f"{prefix}: {title_ru}\n\n"
                f"{lead_ru}\n\n"
                f"[–ò—Å—Ç–æ—á–Ω–∏–∫]({url})"
            )
            message = escape_markdown_v2(message)

            bot.send_message(
                chat_id=CHANNEL_ID,
                text=message,
                parse_mode=ParseMode.MARKDOWN_V2,
                disable_web_page_preview=False
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {url}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {url}: {e}")

def schedule_next_tasks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ 10 –º–∏–Ω ‚Üí –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ :00/:30"""
    while True:
        now = datetime.utcnow()
        current_minute = now.minute
        current_second = now.second

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à—É—é –æ—Ç–º–µ—Ç–∫—É :20 –∏–ª–∏ :50 (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ 10 –º–∏–Ω –¥–æ :30/:00)
        if current_minute < 20:
            next_check = now.replace(minute=20, second=0, microsecond=0)
        elif current_minute < 50:
            next_check = now.replace(minute=50, second=0, microsecond=0)
        else:
            next_check = (now + timedelta(hours=1)).replace(minute=20, second=0, microsecond=0)

        # –ñ–¥—ë–º –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        sleep_seconds = (next_check - now).total_seconds()
        if sleep_seconds > 0:
            time.sleep(sleep_seconds)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ–Ω–µ (–±—ã—Å—Ç—Ä–æ, –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        threading.Thread(target=fetch_articles_for_window, daemon=True).start()

        # –¢–µ–ø–µ—Ä—å –∂–¥—ë–º –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ (:30 –∏–ª–∏ :00)
        send_time = next_check + timedelta(minutes=10)  # :20 ‚Üí :30, :50 ‚Üí :00
        now = datetime.utcnow()
        sleep_to_send = (send_time - now).total_seconds()
        if sleep_to_send > 0:
            time.sleep(sleep_to_send)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        threading.Thread(target=send_pending_articles, daemon=True).start()

# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
app = Flask(__name__)

@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def health_check(path):
    return "OK", 200

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ —É–∂–µ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å
    threading.Thread(target=schedule_next_tasks, daemon=True).start()

    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Render Web Service)
    app.run(host='0.0.0.0', port=PORT)
